/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2025-01-06 08:48:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.user.entities.Product;
import com.user.helper.FactoryProvider;
import com.user.helper.Helper;
import java.util.List;
import com.user.DAO.ProductDao;
import com.user.DAO.CategoryDao;
import com.user.entities.Category;
import java.util.List;
import com.user.DAO.CategoryDao;
import com.user.helper.FactoryProvider;
import com.user.entities.User;
import com.user.entities.Category;

public final class Shop_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/Component/common_css_js.jsp", Long.valueOf(1735386756497L));
    _jspx_dependants.put("/Component/Navbar.jsp", Long.valueOf(1736150532738L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Shop</title>\r\n");
      out.write("    ");
      out.write("\n");
      out.write("\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n");
      out.write("<link rel=\"stylesheet\" href=\"CSS/Style.css\">\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"></script>\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script>\n");
      out.write("<script src=\"JS/Script.js\"></script>");
      out.write("  <!-- Common CSS & JS -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"CSS/Shop.css\"> <!-- Your custom styles -->\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    User user1 = (User) session.getAttribute("user");

    // Fetch categories from the database
    CategoryDao cdao = new CategoryDao(FactoryProvider.getfactory());
    List<Category> categoryList = cdao.getAllCategories();

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>ICONIC STYLES</title>\n");
      out.write("\n");
      out.write("    <style>\n");
      out.write("        /* Custom styles for category dropdown */\n");
      out.write("        .dropdown-item {\n");
      out.write("            color: green !important;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .dropdown-item:hover {\n");
      out.write("            color: white;\n");
      out.write("            background-color: red;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Custom styles for the Home icon */\n");
      out.write("        .home-link {\n");
      out.write("            font-size: 30px;\n");
      out.write("            margin-left: 20px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .home-link:hover {\n");
      out.write("            color: #28a745;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("\n");
      out.write("    <!-- Bootstrap CSS -->\n");
      out.write("    <!-- Add FontAwesome CDN for icons -->\n");
      out.write("    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\" rel=\"stylesheet\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<!-- Navbar with Home Icon -->\n");
      out.write("<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark custom-bg\">\n");
      out.write("    <a class=\"navbar-brand\" href=\"Shop.jsp\">HobbyLobby</a>\n");
      out.write("    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n");
      out.write("        <span class=\"navbar-toggler-icon\"></span>\n");
      out.write("    </button>\n");
      out.write("\n");
      out.write("    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n");
      out.write("        <ul class=\"navbar-nav mr-auto\">\n");
      out.write("            <li class=\"nav-item\">\n");
      out.write("                <a href=\"index.jsp\" class=\"nav-link home-link\" title=\"Home\"><i class=\"fas fa-home\"></i></a>\n");
      out.write("            </li>\n");
      out.write("            <li class=\"nav-item dropdown mt-3\">\n");
      out.write("                <a class=\"nav-link dropdown-toggle\" href=\"Shop.jsp\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n");
      out.write("                    Category\n");
      out.write("                </a>\n");
      out.write("                <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n");
      out.write("                    ");
 for (Category category : categoryList) { 
      out.write("\n");
      out.write("                        <a class=\"dropdown-item\" href=\"Shop.jsp?cate=");
      out.print( category.getCategoryId());
      out.write("\">\n");
      out.write("                            ");
      out.print( category.getCategoryTitle() );
      out.write("\n");
      out.write("                        </a>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                </div>\n");
      out.write("            </li>\n");
      out.write("        </ul>\n");
      out.write("\n");
      out.write("        <!-- Search Form in Navbar -->\n");
      out.write("        \n");
      out.write("\n");
      out.write("        <ul class=\"navbar-nav ml-auto\">\n");
      out.write("            <li class=\"nav-item active\">\n");
      out.write("                <a class=\"nav-link\" href=\"#\" data-toggle=\"modal\" data-target=\"#cart\"><i class=\"fa fa-cart-plus\" style=\"font-size:30px;\"></i> <span class=\"cart-item\">(0)</span></a>\n");
      out.write("            </li>\n");
      out.write("            \n");
      out.write("            \n");
      out.write("            <!<!-- REgiter of login -->\n");
      out.write("\n");
      out.write("           \n");
      out.write("            \n");
      out.write("        </ul>\n");
      out.write("         <form class=\"form-inline my-2 my-lg-0\" action=\"Shop.jsp\" method=\"GET\">\n");
      out.write("            <input class=\"form-control mr-sm-2\" type=\"search\" name=\"searchQuery\" placeholder=\"Search for products\" aria-label=\"Search\">\n");
      out.write("            <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n");
      out.write("        </form>\n");
      out.write("\n");
      out.write("    </div>\n");
      out.write("</nav>\n");
      out.write("\n");
      out.write("<!-- Cart Modal -->\n");
      out.write("<div class=\"modal fade\" id=\"cart\" tabindex=\"-1\" aria-labelledby=\"cartLabel\" aria-hidden=\"true\">\n");
      out.write("    <div class=\"modal-dialog\">\n");
      out.write("        <div class=\"modal-content\">\n");
      out.write("            <div class=\"modal-header\">\n");
      out.write("                <h5 class=\"modal-title\" id=\"cartLabel\">Your Cart</h5>\n");
      out.write("                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n");
      out.write("                    <span aria-hidden=\"true\">&times;</span>\n");
      out.write("                </button>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"modal-body cart-body\">\n");
      out.write("                <h3>Cart is empty.</h3>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"modal-footer\">\n");
      out.write("                <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n");
      out.write("                <button type=\"button\" class=\"btn btn-primary checkout-btn disable\">Proceed to Checkout</button>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<!-- Bootstrap and jQuery JS -->\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\" integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\" crossorigin=\"anonymous\"></script>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("// Function to add product to cart or update quantity if it's already in the cart\n");
      out.write("function add_to_cart(pid, pname, pprice) {\n");
      out.write("    // Retrieve existing cart from localStorage\n");
      out.write("    let cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n");
      out.write("\n");
      out.write("    // Check if the product is already in the cart\n");
      out.write("    let existingProduct = cart.find(item => item.objectId === pid);\n");
      out.write("\n");
      out.write("    if (existingProduct) {\n");
      out.write("        // Product already in cart, increment the quantity\n");
      out.write("        existingProduct.objectQuantity += 1;\n");
      out.write("        console.log(`");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(" quantity increased in the cart.`);\n");
      out.write("    } else {\n");
      out.write("        // Product is not in cart, add it\n");
      out.write("        let newProduct = {\n");
      out.write("            objectId: pid,\n");
      out.write("            objectname: pname,\n");
      out.write("            objectQuantity: 1,\n");
      out.write("            objectprice: pprice\n");
      out.write("        };\n");
      out.write("        cart.push(newProduct);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Save the updated cart back to localStorage\n");
      out.write("    localStorage.setItem(\"cart\", JSON.stringify(cart));\n");
      out.write("\n");
      out.write("    // Optional: Show a message or update the UI\n");
      out.write("    alert(`");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(" has been added to your cart.`);\n");
      out.write("    updateCart(); // Update cart display\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Function to update the cart status and UI (disable checkout button if empty)\n");
      out.write("function updateCart() {\n");
      out.write("    let cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n");
      out.write("\n");
      out.write("    if (cart.length === 0) {\n");
      out.write("        console.log(\"Cart is empty.\");\n");
      out.write("        $(\".cart-item\").html(\"(0)\");\n");
      out.write("        $(\".cart-body\").html(\"<h3>Cart does not have any items.</h3>\");\n");
      out.write("        $(\".checkout-btn\").addClass('disable'); // Disable the checkout button\n");
      out.write("    } else {\n");
      out.write("        console.log(\"Cart contains products:\", cart);\n");
      out.write("        $(\".cart-item\").html(`(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cart.length}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(")`);\n");
      out.write("        \n");
      out.write("        let table = `\n");
      out.write("            <table class='table'>\n");
      out.write("                <thead class='thead-light'>\n");
      out.write("                    <tr>\n");
      out.write("                        <th>Item Name</th>\n");
      out.write("                        <th>Price</th>\n");
      out.write("                        <th>Quantity</th>\n");
      out.write("                        <th>Total Price</th>\n");
      out.write("                        <th>Delete</th>\n");
      out.write("                    </tr>\n");
      out.write("                </thead>\n");
      out.write("                <tbody>\n");
      out.write("        `;\n");
      out.write("\n");
      out.write("        let totalPrice = 0;\n");
      out.write("        \n");
      out.write("        cart.forEach((item) => {\n");
      out.write("            table += `\n");
      out.write("                <tr>\n");
      out.write("                    <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.objectname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td>\n");
      out.write("                    <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.objectprice}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td>\n");
      out.write("                    <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.objectQuantity}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td>\n");
      out.write("                    <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.objectQuantity * item.objectprice}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td>\n");
      out.write("                    <td><button class='btn btn-danger btn-sm' onclick='removeFromCart(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.objectId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(")'>Remove</button></td>\n");
      out.write("                </tr>\n");
      out.write("            `;\n");
      out.write("            totalPrice += item.objectprice * item.objectQuantity;\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        table += `</tbody><tfoot><tr><td colspan='5' class='text-right font-weight-bold'>Total Price: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${totalPrice}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</td></tr></tfoot></table>`;\n");
      out.write("\n");
      out.write("        $(\".cart-body\").html(table);\n");
      out.write("        $(\".checkout-btn\").removeClass('disable'); // Enable the checkout button\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Function to remove a product from the cart\n");
      out.write("function removeFromCart(pprice) {\n");
      out.write("    // Retrieve existing cart from localStorage\n");
      out.write("    let cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n");
      out.write("\n");
      out.write("    // Filter out the item with the given id\n");
      out.write("    cart = cart.filter(item => item.objectprice !== pprice);\n");
      out.write("\n");
      out.write("    // Save the updated cart back to localStorage\n");
      out.write("    localStorage.setItem(\"cart\", JSON.stringify(cart));\n");
      out.write("\n");
      out.write("    // Update the cart display after removal\n");
      out.write("    updateCart();\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Call updateCart when the document is ready\n");
      out.write("$(document).ready(function() {\n");
      out.write("    updateCart();\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write(" <!-- Include Navbar -->\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container mt-4\">\r\n");
      out.write("        <div class=\"col-md-14\">\r\n");
      out.write("            <div class=\"card mt-2\">\r\n");
      out.write("                <div class=\"card-body\">\r\n");
      out.write("\r\n");
      out.write("                    ");

                        // Displaying welcome message if present
                        String welcomeMessage = (String) session.getAttribute("welcomeMessage");
                        if (welcomeMessage != null) { 
                    
      out.write("\r\n");
      out.write("                        <div id=\"welcomeMessage\" class=\"alert alert-success\">\r\n");
      out.write("                            ");
      out.print( welcomeMessage );
      out.write("\r\n");
      out.write("                        </div>\r\n");
      out.write("                        ");
 session.removeAttribute("welcomeMessage"); } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("                    <div class=\"row\">\r\n");
      out.write("                        ");
 
                            // Handling search and category filter
                            String searchQuery = request.getParameter("searchQuery"); // Search Query from the form
                            String cat = request.getParameter("cate"); // Category filter

                            // Create product list based on search or category
                            ProductDao productDao = new ProductDao(FactoryProvider.getfactory());
                            List<Product> productList = null;

                            if (searchQuery != null && !searchQuery.trim().isEmpty()) {
                                // Search by name or description
                                productList = productDao.searchProductsByNameOrDesc(searchQuery);
                            } else if (cat == null || cat.trim().equals("all")) {
                                // Fetch all products if no category filter
                                productList = productDao.getAllProducts();
                            } else {
                                // Fetch products based on selected category
                                try {
                                    int categoryId = Integer.parseInt(cat);
                                    productList = productDao.getAllProductByID(categoryId);
                                } catch (NumberFormatException e) {
                                    out.println("<div class='alert alert-danger'>Invalid Category</div>");
                                }
                            }

                            // If products are available, display them
                            if (productList != null && !productList.isEmpty()) {
                                for (Product product : productList) {
                        
      out.write("\r\n");
      out.write("                                    <div class=\"col-md-3 mb-3\">\r\n");
      out.write("                                        <div class=\"card\">\r\n");
      out.write("                                            <img src=\"/Image/product/");
      out.print( product.getpPhoto() );
      out.write("\" class=\"card-img-top\" alt=\"Product image\">\r\n");
      out.write("                                            <div class=\"card-body\">\r\n");
      out.write("                                                <h5 class=\"card-title\">");
      out.print( product.getpName() );
      out.write("</h5>\r\n");
      out.write("                                                <p class=\"card-text\">");
      out.print( Helper.getWord(product.getpDisc()) );
      out.write("</p>\r\n");
      out.write("                                            </div>\r\n");
      out.write("                                            <div class=\"footer text-center\">\r\n");
      out.write("                                                <button class=\"btn custom-bg text-white\" onclick=\"add_to_cart(");
      out.print( product.getPId());
      out.write(',');
      out.write(' ');
      out.write('\'');
      out.print( product.getpName() );
      out.write('\'');
      out.write(' ');
      out.write(',');
      out.print( product.getPriceAfterDiscount() );
      out.write(")\">Add to Cart</button>\r\n");
      out.write("                                                <button class=\"btn btn-success\">$");
      out.print( product.getPriceAfterDiscount() );
      out.write("/- <span> ");
      out.print( product.getpPrice());
      out.write('/');
      out.write('-');
      out.print( product.getpDiscount());
      out.write("% off </span></button>\r\n");
      out.write("                                            </div>\r\n");
      out.write("                                        </div>\r\n");
      out.write("                                    </div>\r\n");
      out.write("                                ");
 
                                } 
                            } else {
                                // If no products found, display a warning
                                out.println("<div class='alert alert-warning'>No products found for this search or category.</div>");
                            }
                        
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
